Q1. What is the difference between the following 2 statements?
    setTimeout(booyah, 2000);
    setTimeout(booyah(), 2000);

SOLUTION
=========
The first one (setTimeout(booyah, 2000); ) invokes the setTimeout method after 2 sec as expected. However, the second
expression (setTimeout(booyah(), 2000);) runs whatever code exists in the method immediately without waiting the
provided timeout.

Q2. Q2. What do the following 2 alerts display (answer without running the code)?
    var myfunc = function(a, x) {
    return a * x;
    };
    var x = myfunc(2, 3);
    var y = myfunc;
    alert(x);
    alert(y(2,3));

SOLUTION 
========
Both alerts display 6.

Q3. Write functions booyah1 and booyah2 so that in both cases below, an alert box comes up after 2 seconds that
    says “BOOYAH!”
    setTimeout(booyah1, 2000);
    setTimeout(booyah2(), 2000);

SOLUTION 
========
let booyah1 = function(){
  alert("BOOYAH");
};

let booyah2 = function(){
  setTimeout(booyah1, 2000);
};  

Q4. What is "Unobtrusive Javascript"? What is the practical application of Unobtrusive Javascript (and the reasons
for using it)?

SOLUTION
========
Unobtrusive JavaScript is the separation of behavior or JavaScript from presentation (CSS) or content (HTML).
The main reason for using the unobtrusive JavaScript is separation of concerns. This approach is useful in so 
many ways as it makes code less error prone, easy to update and to debug.